name: Build and Test

on:
  push:
    branches: [ staging, master ]
  pull_request:
    branches: [ staging, master ]

jobs:
  build-and-test:
    runs-on:  ubuntu-18.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Install Poetry
        uses: dschep/install-poetry-action@v1.3

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false
          poetry config cache-dir ~/.poetry
          poetry config virtualenvs.path ~/.poetry/venv

      - name: Store Poetry cache
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: ~/.poetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependecies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install -vv

      - name: Run Black
        run:  poetry run black --check .

      - name: Run MyPy
        run: |
          poetry run mypy --strict ./sales_taxes_problem
          poetry run mypy --strict ./tests

      - name: Run isort
        run: poetry run isort -c

      - name: Run Pytest with coverage threshold
        run: |
         poetry run pytest --cov-fail-under=90 --cov=./sales_taxes_problem \
         --cov-report=xml:test-reports/coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./test-reports/coverage.xml
          directory: ./test-reports/
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          path_to_write_report: ./test-reports/codecov_report.gz

      - name: Check code meets quality standards
        id: code-inspector
        uses: codeinspectorio/github-action@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          code_inspector_access_key: ${{ secrets.CODE_INSPECTOR_ACCESS_KEY }}
          code_inspector_secret_key: ${{ secrets.CODE_INSPECTOR_SECRET_KEY }}
          min_quality_grade: 'GOOD'
          min_quality_score: '95'
          max_defects_rate: '0.001'
          max_complex_functions_rate: '0.0001'
          max_long_functions_rate: '0.0001'
          project_name: ''
          max_timeout_sec: '600'
